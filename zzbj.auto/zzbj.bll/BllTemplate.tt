<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ include file="EF.Utility.CS.ttinclude"#>

<#@ assembly name="System.Data.DataSetExtensions.dll" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Data.SqlClient" #>
<#@ include file="$(SolutionDir)T4\OutputHelper.ttinclude" #>
<#@ include file="$(SolutionDir)T4\DbHelper.ttinclude"  #>



<#
var manager = Manager.Create(Host, GenerationEnvironment);
foreach(DbTable dbTable in DbHelper.GetDbTables(config.ConnectionString, config.DbDatabase))
{   
	string tableName=dbTable.TableName;
	manager.StartNewFile(tableName+"Bll.cs");#>
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由T4模板自动生成
//	   生成时间 <#=DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss")#> by zhuhj
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------
/**-----------------------------------------------------------------------------
 * 以下是代码工具生成，请不要做任何添加
 * 否则代码会被覆盖
 *
 * @date 2017-02-08
 * @author <kngcbzzdsn@outlook.com> 
 * 
 * 功 能： N/A
 * 描 述： 数据处理抽象基类 (增、删、改、查、分页等基础方法)
 * 
 * Ver    变更日期              负责人  变更内容
 * ───────────────────────────────────
 * V0.01  2017-02-08 18:10:00   朱会军    初版
 *
 * Copyright (c) Yu Qian Technology Co. Ltd. All rights reserved.
 ------------------------------------------------------------------------------*/
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Text;

using zzbj.ibll;
using zzbj.models;
using zzbj.repository;

namespace zzbj.bll
{
	/// <summary>
	/// I<#=tableName#>Bll
	/// </summary>	
	public partial class  <#=tableName#>Bll:I<#=tableName#>Bll
    {
	    private readonly IRepository<<#=tableName#>> _repository;
		
        public <#=tableName#>Bll(IRepository<<#=tableName#>> repository)
        {
            _repository = repository;
        }

        public bool Insert(<#=tableName#> p)
        {
            return _repository.Insert(p);
        }

        public bool Update(<#=tableName#> p)
        {
           return  _repository.Update(p);
        }

        public bool Delete(<#=tableName#> p)
        {
           return _repository.Delete(p);
        }
        /// <summary>
        /// 按照主键获得数据
        /// </summary>
        /// <param name="keyValues"></param>
        /// <returns></returns>
        public <#=tableName#> FindSingleData(params object[] keyValues)
        {
            return _repository.FindSingleData(keyValues);
        }
		/// <summary>
        /// 根据查询条件获取数据
        /// </summary>
        /// <param name="propertyExpr">查询条件</param>
        /// <returns></returns>
        public IList<<#=tableName#>> GetData(Expression<Func<<#=tableName#>, bool>> propertyExpr=null)
		{
			return _repository.GetData(propertyExpr);
		}
		/// <summary>2.根据条件查询，返回数据
        /// </summary>
        /// <param name="queryParas">查询条件</param>
        /// <param name="propertyExpr">字段的属性</param>
        /// <returns>返回数据列表</returns>
		public IList<<#=tableName#>> FindDataByCondition(List<CommonSearchModel> queryParas,
            Expression<Func<<#=tableName#>, bool>> propertyExpr = null)
		{
			return _repository.FindDataByCondition(queryParas,propertyExpr);
		}
		/// <summary>
        /// 返回数据条数
        /// </summary>
        /// <param name="entityQueryable"></param>
		public int ResultDataCount(IQueryable<<#=tableName#>> entityQueryable)
		{
			return _repository.ResultDataCount(entityQueryable);
		}
		/// <summary>
        /// 返回数据条数
        /// </summary>
        /// <param name="queryParas"></param>
        /// <param name="propertyExpr"></param>
        public int ResultDataCount_New(List<CommonSearchModel> queryParas,
            Expression<Func<<#=tableName#>, bool>> propertyExpr = null)
		{
			return _repository.ResultDataCount_New(queryParas,propertyExpr);
		}
		/// <summary>
        /// 分页数据
        /// </summary>
        /// <param name="queryParas">查询参数</param>
        /// <param name="sortKey">排序</param>
        /// <param name="pageNumber">当前页数</param>
        /// <param name="pageSize">展示数据条数</param>
        /// <returns>返回符合条件数据列表</returns>
		 public IQueryable<<#=tableName#>> FindDataByPageFilter(List<CommonSearchModel> queryParas, string sortKey, int pageNumber, int pageSize, Expression<Func<<#=tableName#>, bool>> propertyExpr = null)
		 {
			return _repository.FindDataByPageFilter(queryParas,sortKey,pageNumber,pageSize,propertyExpr);
		 }
		/// <summary>
        /// 分页数据
        /// </summary>
        /// <param name="sortKey">排序</param>
        /// <param name="pageNumber">当前页数</param>
        /// <param name="pageSize">展示数据条数</param>
        /// <returns>返回符合条件数据列表</returns>
		 public IQueryable<<#=tableName#>> FindDataByPageFilter(string sortKey, int pageNumber, int pageSize, IQueryable<<#=tableName#>> entityList = null)
		 {
			return _repository.FindDataByPageFilter(sortKey,pageNumber,pageSize,entityList);
		 }
    }
}

<#

manager.EndBlock();   
} 
manager.Process(true);  
#>




