<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ include file="EF.Utility.CS.ttinclude"#>

<#@ assembly name="System.Data.DataSetExtensions.dll" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Data.SqlClient" #>
<#@ include file="$(SolutionDir)T4\OutputHelper.ttinclude" #>
<#@ include file="$(SolutionDir)T4\DbHelper.ttinclude"  #>



<#
var manager = Manager.Create(Host, GenerationEnvironment);
foreach(DbTable dbTable in DbHelper.GetDbTables(config.ConnectionString, config.DbDatabase))
{   
	string tableName=dbTable.TableName;
	manager.StartNewFile(tableName+"Bll.cs");#>
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由T4模板自动生成
//	   生成时间 <#=DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss")#> by ding
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Text;

using zzbj.ibll;
using zzbj.models;
using zzbj.repository;

namespace zzbj.bll
{
	/// <summary>
	/// I<#=tableName#>Bll
	/// </summary>	
	public  class  <#=tableName#>Bll:I<#=tableName#>Bll
    {
	    private readonly IRepository<<#=tableName#>> _repository;
		
        public <#=tableName#>Bll(IRepository<<#=tableName#>> repository)
        {
            _repository = repository;
        }

        public bool Insert(<#=tableName#> p)
        {
            return _repository.Insert(p);
        }

        public bool Update(<#=tableName#> p)
        {
           return  _repository.Update(p);
        }

        public bool Delete(<#=tableName#> p)
        {
           return _repository.Delete(p);
        }
		/// <summary>
        /// 根据查询条件获取数据
        /// </summary>
        /// <param name="propertyExpr">查询条件</param>
        /// <returns></returns>
        public IList<<#=tableName#>> GetData(Expression<Func<<#=tableName#>, bool>> propertyExpr)
		{
			return _repository.GetData(propertyExpr);
		}
    }
}

<#

manager.EndBlock();   
} 
manager.Process(true);  
#>




